\"&lt;p&gt;Using Apache Commons Net 3.2, my program is connecting to an FTP server and downloading files from it.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;What it should be able to do, however, is to read the files on the server WITHOUT downloading them.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Is this even possible?&lt;/p&gt;&#xA;&#xA;&lt;p&gt;It's just that the server contains lots of personal information, SSN, phone, email, etc, and only specific people with the right password should be able to access them.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;No one should be able to download anything from the server, at least not without the highest level of permissions granted in my program!&lt;/p&gt;&#xA;&#xA;&lt;p&gt;So far I have an FTPFile [] with all the data files on the server.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;I want to loop through them, see if they have the current user's name on it (meaning they're allowed to view this person/file), and if so, add their data to an ArrayList .&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Any tips?&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;import java.io.File;&#xA;import java.io.FileOutputStream;&#xA;import java.util.List;&#xA;import java.util.Arrays;&#xA;&#xA;import org.apache.commons.net.ftp.FTPClient;&#xA;import org.apache.commons.net.ftp.FTPFile;&#xA;import org.apache.commons.net.ftp.FTPReply;&#xA;&#xA;public class Server {&#xA;    private static final String server = &quot;/server&quot;;&#xA;    private static final String host = &quot;00.000.0.0&quot;;&#xA;    private static final String user = &quot;username&quot;;&#xA;    private static final String pass = &quot;password&quot;;&#xA;    private static List &amp;lt;FTPFile&amp;gt; data;&#xA;    private static FTPClient ftp = new FTPClient ();&#xA;&#xA;    public static void load (String folder) {&#xA;        try {&#xA;            // Connect to the SERVER&#xA;            ftp.connect(host, 21);&#xA;            if (!FTPReply.isPositiveCompletion(ftp.getReplyCode())) {&#xA;                System.out.println(&quot;Could not connect to the server.&quot;);&#xA;                return;&#xA;            }&#xA;&#xA;            // Login to the SERVER&#xA;            ftp.enterLocalPassiveMode();&#xA;            if (!ftp.login(user, pass)) {&#xA;                System.out.println(&quot;Could not login to the server.&quot;);&#xA;                return;&#xA;            }&#xA;&#xA;            // Get DATA from the SERVER&#xA;            System.out.println(server + &quot;/&quot; + folder);&#xA;            data = Arrays.asList(ftp.listFiles(server + &quot;/&quot; + folder));&#xA;            System.out.println(data.size());&#xA;            for (int f = 0; f &amp;lt; data.size(); f++)&#xA;                System.out.println(data.get(f).getName());&#xA;&#xA;            // Disconnect from the SERVER&#xA;            ftp.logout();&#xA;            ftp.disconnect();&#xA;&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace();&#xA;        }&#xA;    }&#xA;&#xA;    public static String read (FTPFile file) {&#xA;        try {&#xA;            String name = file.getName();&#xA;            File tempFolder = new File (&quot;temp/&quot; + name);&#xA;            tempFolder.mkdirs();&#xA;&#xA;            // Create a TEMPORARY DATA FILE&#xA;            File tempFile = new File (tempFolder.getAbsolutePath() + &quot;/data&quot;);&#xA;            System.out.println(tempFile.getAbsolutePath());&#xA;            tempFile.createNewFile();&#xA;            tempFile.deleteOnExit();&#xA;&#xA;            // Get ready to DOWNLOAD DATA from the SERVER&#xA;            FileOutputStream out = new FileOutputStream (new File (name));&#xA;            ftp.connect(host, 21);&#xA;            ftp.login(user,  pass);&#xA;&#xA;            // DOWNLOAD and DISCONNECT&#xA;            ftp.retrieveFile(name, out);&#xA;            out.close();&#xA;            ftp.logout();&#xA;            ftp.disconnect();&#xA;        } catch (Exception e) {&#xA;            e.printStackTrace();&#xA;        }&#xA;        return &quot;&quot;; // This should return a String with data read from the file&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;\